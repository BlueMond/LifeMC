package me.bluemond.lifemc;

import me.bluemond.lifemc.commands.Commands;
import me.bluemond.lifemc.config.ConfigHandler;
import me.bluemond.lifemc.config.ConfigWrapper;
import me.bluemond.lifemc.datahandler.DataHandler;
import me.bluemond.lifemc.listeners.PlayerRespawnListener;
import me.bluemond.lifemc.listeners.InteractListener;
import me.bluemond.lifemc.listeners.LoginListener;
import me.bluemond.lifemc.vault.VaultHandler;

import org.bukkit.plugin.java.JavaPlugin;

//Main plugin class
public class LifeMC extends JavaPlugin {

	private ConfigHandler configHandler = new ConfigHandler(this);
	private VaultHandler vaultHandler = new VaultHandler(this);
	private DataHandler dataHandler;

	private ConfigWrapper dataConfig = new ConfigWrapper(this, "", "data.yml");
	private ConfigWrapper langConfig = new ConfigWrapper(this, "",
			"messages.yml");

	public void onDisable() {
		
		dataConfig.saveConfig();
		
		getLogger().info(
				"LifeMC v" + getDescription().getVersion()
						+ " has been disabled!");
	}

	public void onEnable() {

		// Load config from jar.
		configHandler.loadMainConfig();

		// Load data.yml
		dataConfig.createNewFile("Loaded data.yml",
				"Do not edit this file manually.");

		// Load messages.yml
		langConfig
				.createNewFile("Loaded messages.yml",
						"You can edit all messages to your liking. \nColour codes are supported.");
	
		configHandler.loadLangConfig();
		
		// Load data handler
		dataHandler = new DataHandler(this);

		getCommand("lifemc").setExecutor(new Commands(this));

		registerListeners();

		// Load Vault
		vaultHandler.loadVault();

		getLogger().info(
				"LifeMC v" + getDescription().getVersion()
						+ " has been enabled!");

	}

	private void registerListeners() {
		getServer().getPluginManager().registerEvents(
				new InteractListener(this), this);
		getServer().getPluginManager().registerEvents(
				new PlayerRespawnListener(this), this);
		getServer().getPluginManager().registerEvents(new LoginListener(this),
				this);
	}

	public ConfigHandler getConfigHandler() {
		return configHandler;
	}

	public ConfigWrapper getDataConfig() {
		return dataConfig;
	}
	
	public ConfigWrapper getLangConfig() {
		return langConfig;
	}

	public DataHandler getDataHandler() {
		return dataHandler;
	}
	
	public VaultHandler getVaultHandler() {
		return vaultHandler;
	}
}